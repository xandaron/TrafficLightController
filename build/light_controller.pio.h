// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ---------------- //
// light_controller //
// ---------------- //

#define light_controller_wrap_target 0
#define light_controller_wrap 2

static const uint16_t light_controller_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block                      
    0x6003, //  1: out    pins, 3                    
    0x0000, //  2: jmp    0                          
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program light_controller_program = {
    .instructions = light_controller_program_instructions,
    .length = 3,
    .origin = -1,
};

static inline pio_sm_config light_controller_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + light_controller_wrap_target, offset + light_controller_wrap);
    return c;
}

static inline void light_controller_program_init(PIO pio, uint sm, uint offset, uint pin_base, uint pin_count) {
    for(uint i=pin_base; i<pin_base+pin_count; i++) {
        pio_gpio_init(pio, i);
    }
    pio_sm_set_consecutive_pindirs(pio, sm, pin_base, pin_count, true);
    pio_sm_config c = light_controller_program_get_default_config(offset);
    sm_config_set_out_shift(&c, true, true, 3);
    sm_config_set_out_pins(&c, pin_base, pin_count);
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}

#endif

